//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/ActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionMap"",
    ""maps"": [
        {
            ""name"": ""BalanceGame"",
            ""id"": ""edc123c1-124d-42e9-bdc3-6b402452fd74"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""8be0012f-c13c-4c4d-9302-8ca51070d212"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tilt"",
                    ""type"": ""Value"",
                    ""id"": ""85505c07-0c4a-4ae4-a9e8-e7df907a96f5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cf2a93b6-f980-41f8-aebf-4a66e194ef1a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7276af27-0e71-49d0-b992-7ae8b67da70b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e4a8186e-26ff-4d2e-ac5b-e6974fbadc5f"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d07afa47-3887-47ac-b77e-ff31d9fd1d48"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""a70fabfa-2ddd-4b5c-9dad-98bd909dadc1"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""22c83e1a-6dc2-4729-ab08-53c74aa6c1ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""b81549e2-5b4d-4c36-b895-c432ff7a0bd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7ccf690e-b3c7-49a5-b4c1-0294b783d935"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad1af5a4-a1bd-48ef-8901-2c57af837400"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DragDropGame"",
            ""id"": ""7e007c35-3c19-4151-9e3a-3052d9e3f33b"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""96c93604-a18a-4720-b9d1-6d4a7becf6c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c1dd139-0e51-4a2d-b07d-428c20eb3ae6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BalanceGame
        m_BalanceGame = asset.FindActionMap("BalanceGame", throwIfNotFound: true);
        m_BalanceGame_Click = m_BalanceGame.FindAction("Click", throwIfNotFound: true);
        m_BalanceGame_Tilt = m_BalanceGame.FindAction("Tilt", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
        // DragDropGame
        m_DragDropGame = asset.FindActionMap("DragDropGame", throwIfNotFound: true);
        m_DragDropGame_Newaction = m_DragDropGame.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BalanceGame
    private readonly InputActionMap m_BalanceGame;
    private List<IBalanceGameActions> m_BalanceGameActionsCallbackInterfaces = new List<IBalanceGameActions>();
    private readonly InputAction m_BalanceGame_Click;
    private readonly InputAction m_BalanceGame_Tilt;
    public struct BalanceGameActions
    {
        private @ActionMap m_Wrapper;
        public BalanceGameActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_BalanceGame_Click;
        public InputAction @Tilt => m_Wrapper.m_BalanceGame_Tilt;
        public InputActionMap Get() { return m_Wrapper.m_BalanceGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BalanceGameActions set) { return set.Get(); }
        public void AddCallbacks(IBalanceGameActions instance)
        {
            if (instance == null || m_Wrapper.m_BalanceGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BalanceGameActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Tilt.started += instance.OnTilt;
            @Tilt.performed += instance.OnTilt;
            @Tilt.canceled += instance.OnTilt;
        }

        private void UnregisterCallbacks(IBalanceGameActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Tilt.started -= instance.OnTilt;
            @Tilt.performed -= instance.OnTilt;
            @Tilt.canceled -= instance.OnTilt;
        }

        public void RemoveCallbacks(IBalanceGameActions instance)
        {
            if (m_Wrapper.m_BalanceGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBalanceGameActions instance)
        {
            foreach (var item in m_Wrapper.m_BalanceGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BalanceGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BalanceGameActions @BalanceGame => new BalanceGameActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_Newaction;
    public struct UIActions
    {
        private @ActionMap m_Wrapper;
        public UIActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // DragDropGame
    private readonly InputActionMap m_DragDropGame;
    private List<IDragDropGameActions> m_DragDropGameActionsCallbackInterfaces = new List<IDragDropGameActions>();
    private readonly InputAction m_DragDropGame_Newaction;
    public struct DragDropGameActions
    {
        private @ActionMap m_Wrapper;
        public DragDropGameActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_DragDropGame_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_DragDropGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DragDropGameActions set) { return set.Get(); }
        public void AddCallbacks(IDragDropGameActions instance)
        {
            if (instance == null || m_Wrapper.m_DragDropGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DragDropGameActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IDragDropGameActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IDragDropGameActions instance)
        {
            if (m_Wrapper.m_DragDropGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDragDropGameActions instance)
        {
            foreach (var item in m_Wrapper.m_DragDropGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DragDropGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DragDropGameActions @DragDropGame => new DragDropGameActions(this);
    public interface IBalanceGameActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnTilt(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IDragDropGameActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
